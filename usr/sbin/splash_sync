#!/bin/sh -e
. $IPKG_INSTROOT/lib/functions.sh
. /etc/splash.sh

x=0
current_time=$(date +%s)
splash_check() {
	config_get mac "$1" mac
	config_get time "$1" time
	local chain="$2"
	let time_check=$time+$timeout
	if [ $time_check -gt  $current_time ]; then
	# user is splashed
		iptables -t nat -I $chain -m mac --mac-source $mac -j ACCEPT
	else
	# user is no longer splashed / must click again
		uci delete splash_users.@user[$x]
	fi
	let x=$x+1
}

state_is_queen() {
	local mode=$(cat /tmp/fsm/inetable-* || echo boot)
	for m in $mode
	do
		if [ $m == queen  ]; then
			state=true
			break
		else
			state=false
		fi
	done
    $state
}

# check for current inetable state, allowing a command line override
lockSplash
if state_is_queen; then
    # functional gateway: copy splash db to a new iptables chain and
    # replace the old chain with the new one; this ensures that a user
    # stays splashed during the runtime of this script
    chain_id=$(($chain_id + 1))
	for interface in $(uci -q get splash.settings.interfaces)
	do
		local chain_postfix="_$interface"
		local chain=$chain_prefix$chain_id$chain_postfix
		echo $chain_id > $chain_id_file
		iptables -t nat -N $chain
		config_load splash_users
		config_foreach splash_check user $chain
		iptables -t nat -I inet_splashed_$interface -j $chain
		while iptables -t nat -D inet_splashed_$interface 2 &>/dev/null; do :; done
	done
else
	# no working gw -> remove reference to iptable copy of splash db
	for interface in $(uci -q get splash.settings.interfaces)
	do
		iptables -t nat -F inet_splashed_$interface
	done
fi

# remove old splash_db chains
for i in $(iptables -t nat -L | grep ^Chain | grep '0 references' | cut -f2 -d' ' | grep ^splash_db)
do
	iptables -t nat -F $i
	iptables -t nat -X $i
done
